{"version":3,"sources":["components/NavBar/index.jsx","components/CreatePollForm/index.jsx","utils/PollContext.js","components/PollForm/index.jsx","components/PollResults/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","AppBar","position","Toolbar","variant","Typography","color","useStyles","makeStyles","theme","root","flexGrow","margin","spacing","marginTop","marginBottom","textField","marginLeft","marginRight","pollOption","width","pollButton","optionsCounter","paper","padding","palette","text","secondary","pollOptionsReducer","state","action","options","type","title","option","index","splice","CreatePollForm","pollResetHandler","classes","useState","question","setQuestion","newOption","setNewOption","disableReset","setDisableReset","useReducer","pollOptions","dispatchPollOptions","useEffect","length","Paper","className","noValidate","autoComplete","TextField","label","fullWidth","value","onChange","e","target","error","helperText","map","Button","onClick","disabled","preventDefault","Grid","container","item","sm","align","PollContext","React","createContext","pollQuestion","PollForm","registerVote","setValue","useContext","FormControl","component","FormLabel","RadioGroup","aria-label","name","FormControlLabel","toString","control","Radio","barChart","minHeight","fontFamily","typography","chartTitle","fontWeight","PollResults","data","ResponsiveContainer","BarChart","XAxis","dataKey","YAxis","allowDecimals","Tooltip","Bar","fill","content","App","pollSettings","setPollSettings","Provider","Container","xs","md","poll","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d290cd98.chunk.js","sourcesContent":["import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default function NavBar() {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar variant=\"dense\">\n                <Typography variant=\"h6\" color=\"inherit\">\n                    Sir Vote-a-lot\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n","import PropTypes from \"prop-types\";\nimport { useState, useReducer, useEffect } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        \"& .MuiTextField-root\": {\n            margin: theme.spacing(1, 0),\n        },\n        \"& .MuiButton-root\": {\n            marginTop: theme.spacing(2),\n            marginBottom: theme.spacing(1),\n        },\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    pollOption: {\n        width: \"80%\",\n    },\n    pollButton: {\n        width: \"10%\",\n        marginLeft: theme.spacing(1),\n    },\n    optionsCounter: {\n        margin: \"auto\",\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n}));\n\n// Poll reducer to handle changes in poll options\nfunction pollOptionsReducer(state, action) {\n    let options;\n    switch (action.type) {\n        case \"ADD_OPTION\":\n            // Append new option\n            return [...state, { title: action.option }];\n        case \"EDIT_OPTION\":\n            // Create new variable that will replace state, update option using its index\n            options = [...state];\n            options[action.index] = {\n                title: action.option,\n            };\n            return options;\n        case \"REMOVE_OPTION\":\n            // Create new variable that will replace state, delete option element using its index\n            options = [...state];\n            options.splice(action.index, 1);\n            return options;\n        default:\n            return;\n    }\n}\n\n// Component to generate a new poll\nfunction CreatePollForm({ pollResetHandler }) {\n    const classes = useStyles();\n    const [question, setQuestion] = useState(\"\");\n    const [newOption, setNewOption] = useState(\"\");\n    const [disableReset, setDisableReset] = useState(false);\n\n    const [pollOptions, dispatchPollOptions] = useReducer(\n        pollOptionsReducer,\n        []\n    );\n\n    // Whenever state changes, disable reset button if the question or any option title is longer than 80 chars or there are more than 10 options or less than 2\n    useEffect(() => {\n        if (pollOptions.length > 10 || pollOptions.length < 2) {\n            setDisableReset(true);\n            return;\n        }\n        if (question.length > 80 || question.length === 0) {\n            setDisableReset(true);\n            return;\n        }\n        for (let option of pollOptions) {\n            if (option.title.length > 80 || option.title.length === 0) {\n                setDisableReset(true);\n                return;\n            }\n        }\n\n        setDisableReset(false);\n    }, [pollOptions, question]);\n\n    // Adds new option and empties add option field\n    const addOption = (e) => {\n        e.preventDefault();\n        dispatchPollOptions({ type: \"ADD_OPTION\", option: newOption });\n        setNewOption(\"\");\n    };\n\n    // Empties vote counts and passes new question and options to higher component\n    const resetPoll = (e) => {\n        e.preventDefault();\n        const options = pollOptions.map((option) => {\n            option[\"voteCount\"] = 0;\n            return option;\n        });\n        pollResetHandler(question, options);\n    };\n\n    return (\n        <Paper className={classes.paper}>\n            <form className={classes.root} noValidate autoComplete=\"off\">\n                <TextField\n                    label=\"Poll Question\"\n                    fullWidth\n                    value={question}\n                    onChange={(e) => setQuestion(e.target.value)}\n                    error={question.length > 80}\n                    helperText={\n                        question.length > 80\n                            ? \"This field has an 80 character limit\"\n                            : \"\"\n                    }\n                />\n                {pollOptions &&\n                    pollOptions.map(({ title }, index) => (\n                        <div key={index}>\n                            <TextField\n                                label={\"Option #\" + (index + 1)}\n                                className={classes.pollOption}\n                                value={title}\n                                onChange={(e) =>\n                                    dispatchPollOptions({\n                                        type: \"EDIT_OPTION\",\n                                        index: index,\n                                        option: e.target.value,\n                                    })\n                                }\n                                error={pollOptions[index].title.length > 80}\n                                helperText={\n                                    pollOptions[index].title.length > 80\n                                        ? \"This field has an 80 character limit\"\n                                        : \"\"\n                                }\n                            />\n                            <Button\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.pollButton}\n                                onClick={() =>\n                                    dispatchPollOptions({\n                                        type: \"REMOVE_OPTION\",\n                                        index: index,\n                                    })\n                                }\n                            >\n                                <ClearIcon />\n                            </Button>\n                        </div>\n                    ))}\n                <div>\n                    <TextField\n                        label=\"Add Option\"\n                        className={classes.pollOption}\n                        value={newOption}\n                        onChange={(e) => setNewOption(e.target.value)}\n                        error={newOption.length > 80}\n                        helperText={\n                            newOption.length > 80\n                                ? \"This field has an 80 character limit\"\n                                : \"\"\n                        }\n                        disabled={pollOptions.length >= 10}\n                    />\n                    <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.pollButton}\n                        onClick={addOption}\n                        disabled={\n                            pollOptions.length >= 10 ||\n                            newOption.length > 80 ||\n                            newOption.length === 0\n                        }\n                    >\n                        Add\n                    </Button>\n                </div>\n                <Grid container>\n                    <Grid item sm={9} className={classes.optionsCounter}>\n                        <Typography align={\"left\"}>\n                            {pollOptions.length < 2\n                                ? \"Poll must have at least 2 options\"\n                                : pollOptions.length + \"/10 possible answers\"}\n                        </Typography>\n                    </Grid>\n                    <Grid item sm={3}>\n                        <Button\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={resetPoll}\n                            disabled={disableReset}\n                        >\n                            Reset\n                        </Button>\n                    </Grid>\n                </Grid>\n            </form>\n        </Paper>\n    );\n}\n\nCreatePollForm.propTypes = {\n    pollResetHandler: PropTypes.func.isRequired,\n};\n\nexport default CreatePollForm;\n","import React from \"react\";\n\nconst PollContext = React.createContext({\n    pollQuestion: \"\",\n    pollOptions: [],\n});\n\nexport default PollContext;\n","import PropTypes from \"prop-types\";\nimport { useState, useContext } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Button from \"@material-ui/core/Button\";\n\nimport PollContext from \"../../utils/PollContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n    },\n}));\n\n// Builds out the voting form\nfunction PollForm({ registerVote }) {\n    const classes = useStyles();\n\n    // Poll radio select value\n    const [value, setValue] = useState(\"\");\n\n    // Get poll settings from context store\n    const { pollQuestion, pollOptions } = useContext(PollContext);\n\n    // Passes the select poll option to the higher component and resets the voting form\n    const handleVote = (e) => {\n        e.preventDefault();\n        registerVote(value);\n        setValue(\"\");\n    };\n\n    // return an empty component if poll settings context is empty\n    if (!pollOptions) return null;\n    return (\n        <Paper className={classes.paper}>\n            <FormControl component=\"fieldset\">\n                <FormLabel component=\"legend\"> {pollQuestion}</FormLabel>\n                <RadioGroup\n                    aria-label=\"gender\"\n                    name=\"gender1\"\n                    value={value}\n                    onChange={(e) => setValue(e.target.value)}\n                >\n                    {pollOptions.map(({ title }, index) => (\n                        <FormControlLabel\n                            key={index}\n                            value={index.toString()}\n                            control={<Radio />}\n                            label={title}\n                        />\n                    ))}\n                </RadioGroup>\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={handleVote}\n                >\n                    Vote\n                </Button>\n            </FormControl>\n        </Paper>\n    );\n}\n\nPollForm.propTypes = {\n    registerVote: PropTypes.func.isRequired,\n};\n\nexport default PollForm;\n","import { useContext } from \"react\";\n\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    Tooltip,\n    ResponsiveContainer,\n} from \"recharts\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Typography } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport PollContext from \"../../utils/PollContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    barChart: {\n        width: \"100%\",\n        minHeight: \"300px\",\n    },\n    paper: {\n        padding: theme.spacing(2),\n        color: theme.palette.text.secondary,\n        fontFamily: theme.typography.fontFamily,\n    },\n    chartTitle: {\n        fontWeight: \"700\",\n    },\n}));\n\n// Generates a Bar Chart using Recharts\nfunction PollResults() {\n    const classes = useStyles();\n\n    const { pollQuestion, pollOptions } = useContext(PollContext);\n    if (!pollOptions) return null;\n    const data = [...pollOptions];\n    return (\n        <Paper className={classes.paper}>\n            <Typography align=\"center\" className={classes.chartTitle}>\n                {pollQuestion}\n            </Typography>\n            <ResponsiveContainer className={classes.barChart}>\n                <BarChart data={data}>\n                    <XAxis dataKey=\"title\" />\n                    <YAxis allowDecimals={false} />\n                    <Tooltip />\n                    <Bar dataKey=\"voteCount\" name=\"votes\" fill=\"#3f51b5\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </Paper>\n    );\n}\n\nexport default PollResults;\n","import { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\n\nimport NavBar from \"./components/NavBar\";\nimport CreatePollForm from \"./components/CreatePollForm\";\nimport PollForm from \"./components/PollForm\";\nimport PollResults from \"./components/PollResults\";\n\nimport PollContext from \"./utils/PollContext\";\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        \"& .MuiTextField-root\": {\n            margin: theme.spacing(1, 0),\n        },\n    },\n    content: {\n        margin: theme.spacing(2, 0),\n    },\n}));\n\n// Root of the sir vote-a-lot app that renders Navbar and sections\nfunction App() {\n    const [pollSettings, setPollSettings] = useState({});\n    const classes = useStyles();\n\n    // Function that will be passed in to the CreatePollForm to handle settings reset\n    const pollResetHandler = (pollQuestion, pollOptions) => {\n        setPollSettings({ pollQuestion, pollOptions });\n    };\n\n    // Increments an option's vote count and saves vote into pollsettings, this function will be passed into the voting form.\n    const registerVote = (option) => {\n        const poll = { ...pollSettings };\n        poll[\"pollOptions\"][option][\"voteCount\"] =\n            pollSettings[\"pollOptions\"][option][\"voteCount\"] + 1;\n        setPollSettings(poll);\n    };\n\n    return (\n        <PollContext.Provider value={pollSettings}>\n            <NavBar />\n            <div className={classes.content}>\n                <Container>\n                    <Grid container spacing={3}>\n                        <Grid item xs={12} md={4}>\n                            <CreatePollForm\n                                pollResetHandler={pollResetHandler}\n                            />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <PollForm registerVote={registerVote} />\n                        </Grid>\n                        <Grid item xs={12} md={4}>\n                            <PollResults />\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n        </PollContext.Provider>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}